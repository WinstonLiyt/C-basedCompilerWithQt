项目集I0:
{ P -> . N declare_list }, ##, 
{ N -> . }, int, void, 

项目集I1:
{ P -> N . declare_list }, ##, 
{ declare_list -> . declare declare_list }, ##, 
{ declare_list -> . declare }, ##, 
{ declare -> . int Identifier M A function_declare }, int, void, 
{ declare -> . int Identifier var_declare }, int, void, 
{ declare -> . void Identifier M A function_declare }, int, void, 
{ declare -> . int Identifier M A function_declare }, ##, 
{ declare -> . int Identifier var_declare }, ##, 
{ declare -> . void Identifier M A function_declare }, ##, 

项目集I2:
{ declare -> int . Identifier M A function_declare }, int, void, 
{ declare -> int . Identifier var_declare }, int, void, 
{ declare -> int . Identifier M A function_declare }, ##, 
{ declare -> int . Identifier var_declare }, ##, 

项目集I3:
{ declare -> void . Identifier M A function_declare }, int, void, 
{ declare -> void . Identifier M A function_declare }, ##, 

项目集I4:
{ declare_list -> declare . declare_list }, ##, 
{ declare_list -> . declare declare_list }, ##, 
{ declare_list -> . declare }, ##, 
{ declare -> . int Identifier M A function_declare }, int, void, 
{ declare -> . int Identifier var_declare }, int, void, 
{ declare -> . void Identifier M A function_declare }, int, void, 
{ declare -> . int Identifier M A function_declare }, ##, 
{ declare -> . int Identifier var_declare }, ##, 
{ declare -> . void Identifier M A function_declare }, ##, 
{ declare_list -> declare . }, ##, 

项目集I5:
{ P -> N declare_list . }, ##, 

项目集I6:
{ declare -> int Identifier . M A function_declare }, int, void, 
{ M -> . }, (, 
{ declare -> int Identifier . var_declare }, int, void, 
{ var_declare -> . ; }, int, void, 
{ declare -> int Identifier . M A function_declare }, ##, 
{ declare -> int Identifier . var_declare }, ##, 
{ var_declare -> . ; }, ##, 

项目集I7:
{ declare -> void Identifier . M A function_declare }, int, void, 
{ M -> . }, (, 
{ declare -> void Identifier . M A function_declare }, ##, 

项目集I8:
{ declare_list -> declare declare_list . }, ##, 

项目集I9:
{ var_declare -> ; . }, int, void, 
{ var_declare -> ; . }, ##, 

项目集I10:
{ declare -> int Identifier M . A function_declare }, int, void, 
{ A -> . }, (, 
{ declare -> int Identifier M . A function_declare }, ##, 

项目集I11:
{ declare -> int Identifier var_declare . }, int, void, 
{ declare -> int Identifier var_declare . }, ##, 

项目集I12:
{ declare -> void Identifier M . A function_declare }, int, void, 
{ A -> . }, (, 
{ declare -> void Identifier M . A function_declare }, ##, 

项目集I13:
{ declare -> int Identifier M A . function_declare }, int, void, 
{ function_declare -> . ( parameter ) sentence_block }, int, void, 
{ declare -> int Identifier M A . function_declare }, ##, 
{ function_declare -> . ( parameter ) sentence_block }, ##, 

项目集I14:
{ declare -> void Identifier M A . function_declare }, int, void, 
{ function_declare -> . ( parameter ) sentence_block }, int, void, 
{ declare -> void Identifier M A . function_declare }, ##, 
{ function_declare -> . ( parameter ) sentence_block }, ##, 

项目集I15:
{ function_declare -> ( . parameter ) sentence_block }, int, void, 
{ parameter -> . parameter_list }, ), 
{ parameter -> . void }, ), 
{ parameter_list -> . param }, ), 
{ parameter_list -> . param , parameter_list }, ), 
{ param -> . int Identifier }, ), 
{ param -> . int Identifier }, ,, 
{ function_declare -> ( . parameter ) sentence_block }, ##, 

项目集I16:
{ declare -> int Identifier M A function_declare . }, int, void, 
{ declare -> int Identifier M A function_declare . }, ##, 

项目集I17:
{ declare -> void Identifier M A function_declare . }, int, void, 
{ declare -> void Identifier M A function_declare . }, ##, 

项目集I18:
{ param -> int . Identifier }, ), 
{ param -> int . Identifier }, ,, 

项目集I19:
{ parameter -> void . }, ), 

项目集I20:
{ parameter_list -> param . }, ), 
{ parameter_list -> param . , parameter_list }, ), 

项目集I21:
{ function_declare -> ( parameter . ) sentence_block }, int, void, 
{ function_declare -> ( parameter . ) sentence_block }, ##, 

项目集I22:
{ parameter -> parameter_list . }, ), 

项目集I23:
{ param -> int Identifier . }, ), 
{ param -> int Identifier . }, ,, 

项目集I24:
{ parameter_list -> param , . parameter_list }, ), 
{ parameter_list -> . param }, ), 
{ parameter_list -> . param , parameter_list }, ), 
{ param -> . int Identifier }, ), 
{ param -> . int Identifier }, ,, 

项目集I25:
{ function_declare -> ( parameter ) . sentence_block }, int, void, 
{ sentence_block -> . { inner_declare sentence_list } }, int, void, 
{ function_declare -> ( parameter ) . sentence_block }, ##, 
{ sentence_block -> . { inner_declare sentence_list } }, ##, 

项目集I26:
{ parameter_list -> param , parameter_list . }, ), 

项目集I27:
{ sentence_block -> { . inner_declare sentence_list } }, int, void, 
{ inner_declare -> . }, if, while, return, Identifier, 
{ inner_declare -> . inner_var_declare ; inner_declare }, if, while, return, Identifier, 
{ inner_var_declare -> . int Identifier }, ;, 
{ sentence_block -> { . inner_declare sentence_list } }, ##, 

项目集I28:
{ function_declare -> ( parameter ) sentence_block . }, int, void, 
{ function_declare -> ( parameter ) sentence_block . }, ##, 

项目集I29:
{ inner_var_declare -> int . Identifier }, ;, 

项目集I30:
{ sentence_block -> { inner_declare . sentence_list } }, int, void, 
{ sentence_list -> . sentence M sentence_list }, }, 
{ sentence_list -> . sentence }, }, 
{ sentence -> . if_sentence }, if, while, return, Identifier, 
{ sentence -> . while_sentence }, if, while, return, Identifier, 
{ sentence -> . return_sentence }, if, while, return, Identifier, 
{ sentence -> . assign_sentence }, if, while, return, Identifier, 
{ sentence -> . if_sentence }, }, 
{ sentence -> . while_sentence }, }, 
{ sentence -> . return_sentence }, }, 
{ sentence -> . assign_sentence }, }, 
{ if_sentence -> . if ( expression ) A sentence_block }, if, while, return, Identifier, 
{ if_sentence -> . if ( expression ) A sentence_block N else M A sentence_block }, if, while, return, Identifier, 
{ while_sentence -> . while M ( expression ) A sentence_block }, if, while, return, Identifier, 
{ return_sentence -> . return ; }, if, while, return, Identifier, 
{ return_sentence -> . return expression ; }, if, while, return, Identifier, 
{ assign_sentence -> . Identifier = expression ; }, if, while, return, Identifier, 
{ if_sentence -> . if ( expression ) A sentence_block }, }, 
{ if_sentence -> . if ( expression ) A sentence_block N else M A sentence_block }, }, 
{ while_sentence -> . while M ( expression ) A sentence_block }, }, 
{ return_sentence -> . return ; }, }, 
{ return_sentence -> . return expression ; }, }, 
{ assign_sentence -> . Identifier = expression ; }, }, 
{ sentence_block -> { inner_declare . sentence_list } }, ##, 

项目集I31:
{ inner_declare -> inner_var_declare . ; inner_declare }, if, while, return, Identifier, 

项目集I32:
{ inner_var_declare -> int Identifier . }, ;, 

项目集I33:
{ if_sentence -> if . ( expression ) A sentence_block }, if, while, return, Identifier, 
{ if_sentence -> if . ( expression ) A sentence_block N else M A sentence_block }, if, while, return, Identifier, 
{ if_sentence -> if . ( expression ) A sentence_block }, }, 
{ if_sentence -> if . ( expression ) A sentence_block N else M A sentence_block }, }, 

项目集I34:
{ return_sentence -> return . ; }, if, while, return, Identifier, 
{ return_sentence -> return . expression ; }, if, while, return, Identifier, 
{ expression -> . add_expression }, ;, 
{ expression -> . add_expression > add_expression }, ;, 
{ expression -> . add_expression < add_expression }, ;, 
{ expression -> . add_expression == add_expression }, ;, 
{ expression -> . add_expression >= add_expression }, ;, 
{ expression -> . add_expression <= add_expression }, ;, 
{ expression -> . add_expression != add_expression }, ;, 
{ add_expression -> . item }, ;, 
{ add_expression -> . item + add_expression }, ;, 
{ add_expression -> . item - add_expression }, ;, 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ item -> . factor }, ;, 
{ item -> . factor * item }, ;, 
{ item -> . factor / item }, ;, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, ;, 
{ factor -> . ( expression ) }, ;, 
{ factor -> . Identifier ( argument_list ) }, ;, 
{ factor -> . Identifier }, ;, 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ return_sentence -> return . ; }, }, 
{ return_sentence -> return . expression ; }, }, 

项目集I35:
{ while_sentence -> while . M ( expression ) A sentence_block }, if, while, return, Identifier, 
{ M -> . }, (, 
{ while_sentence -> while . M ( expression ) A sentence_block }, }, 

项目集I36:
{ assign_sentence -> Identifier . = expression ; }, if, while, return, Identifier, 
{ assign_sentence -> Identifier . = expression ; }, }, 

项目集I37:
{ sentence -> assign_sentence . }, if, while, return, Identifier, 
{ sentence -> assign_sentence . }, }, 

项目集I38:
{ sentence -> if_sentence . }, if, while, return, Identifier, 
{ sentence -> if_sentence . }, }, 

项目集I39:
{ sentence -> return_sentence . }, if, while, return, Identifier, 
{ sentence -> return_sentence . }, }, 

项目集I40:
{ sentence_list -> sentence . M sentence_list }, }, 
{ M -> . }, if, while, return, Identifier, 
{ sentence_list -> sentence . }, }, 

项目集I41:
{ sentence_block -> { inner_declare sentence_list . } }, int, void, 
{ sentence_block -> { inner_declare sentence_list . } }, ##, 

项目集I42:
{ sentence -> while_sentence . }, if, while, return, Identifier, 
{ sentence -> while_sentence . }, }, 

项目集I43:
{ inner_declare -> inner_var_declare ; . inner_declare }, if, while, return, Identifier, 
{ inner_declare -> . }, if, while, return, Identifier, 
{ inner_declare -> . inner_var_declare ; inner_declare }, if, while, return, Identifier, 
{ inner_var_declare -> . int Identifier }, ;, 

项目集I44:
{ if_sentence -> if ( . expression ) A sentence_block }, if, while, return, Identifier, 
{ expression -> . add_expression }, ), 
{ expression -> . add_expression > add_expression }, ), 
{ expression -> . add_expression < add_expression }, ), 
{ expression -> . add_expression == add_expression }, ), 
{ expression -> . add_expression >= add_expression }, ), 
{ expression -> . add_expression <= add_expression }, ), 
{ expression -> . add_expression != add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ if_sentence -> if ( . expression ) A sentence_block N else M A sentence_block }, if, while, return, Identifier, 
{ if_sentence -> if ( . expression ) A sentence_block }, }, 
{ if_sentence -> if ( . expression ) A sentence_block N else M A sentence_block }, }, 

项目集I45:
{ factor -> Integer . }, ;, 
{ factor -> Integer . }, *, 
{ factor -> Integer . }, /, 
{ factor -> Integer . }, +, 
{ factor -> Integer . }, -, 
{ factor -> Integer . }, >, 
{ factor -> Integer . }, <, 
{ factor -> Integer . }, ==, 
{ factor -> Integer . }, >=, 
{ factor -> Integer . }, <=, 
{ factor -> Integer . }, !=, 

项目集I46:
{ factor -> ( . expression ) }, ;, 
{ expression -> . add_expression }, ), 
{ expression -> . add_expression > add_expression }, ), 
{ expression -> . add_expression < add_expression }, ), 
{ expression -> . add_expression == add_expression }, ), 
{ expression -> . add_expression >= add_expression }, ), 
{ expression -> . add_expression <= add_expression }, ), 
{ expression -> . add_expression != add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ factor -> ( . expression ) }, *, 
{ factor -> ( . expression ) }, /, 
{ factor -> ( . expression ) }, +, 
{ factor -> ( . expression ) }, -, 
{ factor -> ( . expression ) }, >, 
{ factor -> ( . expression ) }, <, 
{ factor -> ( . expression ) }, ==, 
{ factor -> ( . expression ) }, >=, 
{ factor -> ( . expression ) }, <=, 
{ factor -> ( . expression ) }, !=, 

项目集I47:
{ return_sentence -> return ; . }, if, while, return, Identifier, 
{ return_sentence -> return ; . }, }, 

项目集I48:
{ factor -> Identifier . ( argument_list ) }, ;, 
{ factor -> Identifier . }, ;, 
{ factor -> Identifier . ( argument_list ) }, *, 
{ factor -> Identifier . }, *, 
{ factor -> Identifier . ( argument_list ) }, /, 
{ factor -> Identifier . }, /, 
{ factor -> Identifier . ( argument_list ) }, +, 
{ factor -> Identifier . }, +, 
{ factor -> Identifier . ( argument_list ) }, -, 
{ factor -> Identifier . }, -, 
{ factor -> Identifier . ( argument_list ) }, >, 
{ factor -> Identifier . }, >, 
{ factor -> Identifier . ( argument_list ) }, <, 
{ factor -> Identifier . }, <, 
{ factor -> Identifier . ( argument_list ) }, ==, 
{ factor -> Identifier . }, ==, 
{ factor -> Identifier . ( argument_list ) }, >=, 
{ factor -> Identifier . }, >=, 
{ factor -> Identifier . ( argument_list ) }, <=, 
{ factor -> Identifier . }, <=, 
{ factor -> Identifier . ( argument_list ) }, !=, 
{ factor -> Identifier . }, !=, 

项目集I49:
{ expression -> add_expression . }, ;, 
{ expression -> add_expression . > add_expression }, ;, 
{ expression -> add_expression . < add_expression }, ;, 
{ expression -> add_expression . == add_expression }, ;, 
{ expression -> add_expression . >= add_expression }, ;, 
{ expression -> add_expression . <= add_expression }, ;, 
{ expression -> add_expression . != add_expression }, ;, 

项目集I50:
{ return_sentence -> return expression . ; }, if, while, return, Identifier, 
{ return_sentence -> return expression . ; }, }, 

项目集I51:
{ item -> factor . }, ;, 
{ item -> factor . * item }, ;, 
{ item -> factor . / item }, ;, 
{ item -> factor . }, +, 
{ item -> factor . * item }, +, 
{ item -> factor . / item }, +, 
{ item -> factor . }, -, 
{ item -> factor . * item }, -, 
{ item -> factor . / item }, -, 
{ item -> factor . }, >, 
{ item -> factor . * item }, >, 
{ item -> factor . / item }, >, 
{ item -> factor . }, <, 
{ item -> factor . * item }, <, 
{ item -> factor . / item }, <, 
{ item -> factor . }, ==, 
{ item -> factor . * item }, ==, 
{ item -> factor . / item }, ==, 
{ item -> factor . }, >=, 
{ item -> factor . * item }, >=, 
{ item -> factor . / item }, >=, 
{ item -> factor . }, <=, 
{ item -> factor . * item }, <=, 
{ item -> factor . / item }, <=, 
{ item -> factor . }, !=, 
{ item -> factor . * item }, !=, 
{ item -> factor . / item }, !=, 

项目集I52:
{ add_expression -> item . }, ;, 
{ add_expression -> item . + add_expression }, ;, 
{ add_expression -> item . - add_expression }, ;, 
{ add_expression -> item . }, >, 
{ add_expression -> item . + add_expression }, >, 
{ add_expression -> item . - add_expression }, >, 
{ add_expression -> item . }, <, 
{ add_expression -> item . + add_expression }, <, 
{ add_expression -> item . - add_expression }, <, 
{ add_expression -> item . }, ==, 
{ add_expression -> item . + add_expression }, ==, 
{ add_expression -> item . - add_expression }, ==, 
{ add_expression -> item . }, >=, 
{ add_expression -> item . + add_expression }, >=, 
{ add_expression -> item . - add_expression }, >=, 
{ add_expression -> item . }, <=, 
{ add_expression -> item . + add_expression }, <=, 
{ add_expression -> item . - add_expression }, <=, 
{ add_expression -> item . }, !=, 
{ add_expression -> item . + add_expression }, !=, 
{ add_expression -> item . - add_expression }, !=, 

项目集I53:
{ while_sentence -> while M . ( expression ) A sentence_block }, if, while, return, Identifier, 
{ while_sentence -> while M . ( expression ) A sentence_block }, }, 

项目集I54:
{ assign_sentence -> Identifier = . expression ; }, if, while, return, Identifier, 
{ expression -> . add_expression }, ;, 
{ expression -> . add_expression > add_expression }, ;, 
{ expression -> . add_expression < add_expression }, ;, 
{ expression -> . add_expression == add_expression }, ;, 
{ expression -> . add_expression >= add_expression }, ;, 
{ expression -> . add_expression <= add_expression }, ;, 
{ expression -> . add_expression != add_expression }, ;, 
{ add_expression -> . item }, ;, 
{ add_expression -> . item + add_expression }, ;, 
{ add_expression -> . item - add_expression }, ;, 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ item -> . factor }, ;, 
{ item -> . factor * item }, ;, 
{ item -> . factor / item }, ;, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, ;, 
{ factor -> . ( expression ) }, ;, 
{ factor -> . Identifier ( argument_list ) }, ;, 
{ factor -> . Identifier }, ;, 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ assign_sentence -> Identifier = . expression ; }, }, 

项目集I55:
{ sentence_list -> sentence M . sentence_list }, }, 
{ sentence_list -> . sentence M sentence_list }, }, 
{ sentence_list -> . sentence }, }, 
{ sentence -> . if_sentence }, if, while, return, Identifier, 
{ sentence -> . while_sentence }, if, while, return, Identifier, 
{ sentence -> . return_sentence }, if, while, return, Identifier, 
{ sentence -> . assign_sentence }, if, while, return, Identifier, 
{ sentence -> . if_sentence }, }, 
{ sentence -> . while_sentence }, }, 
{ sentence -> . return_sentence }, }, 
{ sentence -> . assign_sentence }, }, 
{ if_sentence -> . if ( expression ) A sentence_block }, if, while, return, Identifier, 
{ if_sentence -> . if ( expression ) A sentence_block N else M A sentence_block }, if, while, return, Identifier, 
{ while_sentence -> . while M ( expression ) A sentence_block }, if, while, return, Identifier, 
{ return_sentence -> . return ; }, if, while, return, Identifier, 
{ return_sentence -> . return expression ; }, if, while, return, Identifier, 
{ assign_sentence -> . Identifier = expression ; }, if, while, return, Identifier, 
{ if_sentence -> . if ( expression ) A sentence_block }, }, 
{ if_sentence -> . if ( expression ) A sentence_block N else M A sentence_block }, }, 
{ while_sentence -> . while M ( expression ) A sentence_block }, }, 
{ return_sentence -> . return ; }, }, 
{ return_sentence -> . return expression ; }, }, 
{ assign_sentence -> . Identifier = expression ; }, }, 

项目集I56:
{ sentence_block -> { inner_declare sentence_list } . }, int, void, 
{ sentence_block -> { inner_declare sentence_list } . }, ##, 

项目集I57:
{ inner_declare -> inner_var_declare ; inner_declare . }, if, while, return, Identifier, 

项目集I58:
{ factor -> Integer . }, ), 
{ factor -> Integer . }, *, 
{ factor -> Integer . }, /, 
{ factor -> Integer . }, +, 
{ factor -> Integer . }, -, 
{ factor -> Integer . }, >, 
{ factor -> Integer . }, <, 
{ factor -> Integer . }, ==, 
{ factor -> Integer . }, >=, 
{ factor -> Integer . }, <=, 
{ factor -> Integer . }, !=, 

项目集I59:
{ factor -> ( . expression ) }, ), 
{ expression -> . add_expression }, ), 
{ expression -> . add_expression > add_expression }, ), 
{ expression -> . add_expression < add_expression }, ), 
{ expression -> . add_expression == add_expression }, ), 
{ expression -> . add_expression >= add_expression }, ), 
{ expression -> . add_expression <= add_expression }, ), 
{ expression -> . add_expression != add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ factor -> ( . expression ) }, *, 
{ factor -> ( . expression ) }, /, 
{ factor -> ( . expression ) }, +, 
{ factor -> ( . expression ) }, -, 
{ factor -> ( . expression ) }, >, 
{ factor -> ( . expression ) }, <, 
{ factor -> ( . expression ) }, ==, 
{ factor -> ( . expression ) }, >=, 
{ factor -> ( . expression ) }, <=, 
{ factor -> ( . expression ) }, !=, 

项目集I60:
{ factor -> Identifier . ( argument_list ) }, ), 
{ factor -> Identifier . }, ), 
{ factor -> Identifier . ( argument_list ) }, *, 
{ factor -> Identifier . }, *, 
{ factor -> Identifier . ( argument_list ) }, /, 
{ factor -> Identifier . }, /, 
{ factor -> Identifier . ( argument_list ) }, +, 
{ factor -> Identifier . }, +, 
{ factor -> Identifier . ( argument_list ) }, -, 
{ factor -> Identifier . }, -, 
{ factor -> Identifier . ( argument_list ) }, >, 
{ factor -> Identifier . }, >, 
{ factor -> Identifier . ( argument_list ) }, <, 
{ factor -> Identifier . }, <, 
{ factor -> Identifier . ( argument_list ) }, ==, 
{ factor -> Identifier . }, ==, 
{ factor -> Identifier . ( argument_list ) }, >=, 
{ factor -> Identifier . }, >=, 
{ factor -> Identifier . ( argument_list ) }, <=, 
{ factor -> Identifier . }, <=, 
{ factor -> Identifier . ( argument_list ) }, !=, 
{ factor -> Identifier . }, !=, 

项目集I61:
{ expression -> add_expression . }, ), 
{ expression -> add_expression . > add_expression }, ), 
{ expression -> add_expression . < add_expression }, ), 
{ expression -> add_expression . == add_expression }, ), 
{ expression -> add_expression . >= add_expression }, ), 
{ expression -> add_expression . <= add_expression }, ), 
{ expression -> add_expression . != add_expression }, ), 

项目集I62:
{ if_sentence -> if ( expression . ) A sentence_block }, if, while, return, Identifier, 
{ if_sentence -> if ( expression . ) A sentence_block N else M A sentence_block }, if, while, return, Identifier, 
{ if_sentence -> if ( expression . ) A sentence_block }, }, 
{ if_sentence -> if ( expression . ) A sentence_block N else M A sentence_block }, }, 

项目集I63:
{ item -> factor . }, ), 
{ item -> factor . * item }, ), 
{ item -> factor . / item }, ), 
{ item -> factor . }, +, 
{ item -> factor . * item }, +, 
{ item -> factor . / item }, +, 
{ item -> factor . }, -, 
{ item -> factor . * item }, -, 
{ item -> factor . / item }, -, 
{ item -> factor . }, >, 
{ item -> factor . * item }, >, 
{ item -> factor . / item }, >, 
{ item -> factor . }, <, 
{ item -> factor . * item }, <, 
{ item -> factor . / item }, <, 
{ item -> factor . }, ==, 
{ item -> factor . * item }, ==, 
{ item -> factor . / item }, ==, 
{ item -> factor . }, >=, 
{ item -> factor . * item }, >=, 
{ item -> factor . / item }, >=, 
{ item -> factor . }, <=, 
{ item -> factor . * item }, <=, 
{ item -> factor . / item }, <=, 
{ item -> factor . }, !=, 
{ item -> factor . * item }, !=, 
{ item -> factor . / item }, !=, 

项目集I64:
{ add_expression -> item . }, ), 
{ add_expression -> item . + add_expression }, ), 
{ add_expression -> item . - add_expression }, ), 
{ add_expression -> item . }, >, 
{ add_expression -> item . + add_expression }, >, 
{ add_expression -> item . - add_expression }, >, 
{ add_expression -> item . }, <, 
{ add_expression -> item . + add_expression }, <, 
{ add_expression -> item . - add_expression }, <, 
{ add_expression -> item . }, ==, 
{ add_expression -> item . + add_expression }, ==, 
{ add_expression -> item . - add_expression }, ==, 
{ add_expression -> item . }, >=, 
{ add_expression -> item . + add_expression }, >=, 
{ add_expression -> item . - add_expression }, >=, 
{ add_expression -> item . }, <=, 
{ add_expression -> item . + add_expression }, <=, 
{ add_expression -> item . - add_expression }, <=, 
{ add_expression -> item . }, !=, 
{ add_expression -> item . + add_expression }, !=, 
{ add_expression -> item . - add_expression }, !=, 

项目集I65:
{ factor -> ( expression . ) }, ;, 
{ factor -> ( expression . ) }, *, 
{ factor -> ( expression . ) }, /, 
{ factor -> ( expression . ) }, +, 
{ factor -> ( expression . ) }, -, 
{ factor -> ( expression . ) }, >, 
{ factor -> ( expression . ) }, <, 
{ factor -> ( expression . ) }, ==, 
{ factor -> ( expression . ) }, >=, 
{ factor -> ( expression . ) }, <=, 
{ factor -> ( expression . ) }, !=, 

项目集I66:
{ factor -> Identifier ( . argument_list ) }, ;, 
{ argument_list -> . }, ), 
{ argument_list -> . expression }, ), 
{ argument_list -> . expression , argument_list }, ), 
{ expression -> . add_expression }, ), 
{ expression -> . add_expression > add_expression }, ), 
{ expression -> . add_expression < add_expression }, ), 
{ expression -> . add_expression == add_expression }, ), 
{ expression -> . add_expression >= add_expression }, ), 
{ expression -> . add_expression <= add_expression }, ), 
{ expression -> . add_expression != add_expression }, ), 
{ expression -> . add_expression }, ,, 
{ expression -> . add_expression > add_expression }, ,, 
{ expression -> . add_expression < add_expression }, ,, 
{ expression -> . add_expression == add_expression }, ,, 
{ expression -> . add_expression >= add_expression }, ,, 
{ expression -> . add_expression <= add_expression }, ,, 
{ expression -> . add_expression != add_expression }, ,, 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 
{ factor -> Identifier ( . argument_list ) }, *, 
{ factor -> Identifier ( . argument_list ) }, /, 
{ factor -> Identifier ( . argument_list ) }, +, 
{ factor -> Identifier ( . argument_list ) }, -, 
{ factor -> Identifier ( . argument_list ) }, >, 
{ factor -> Identifier ( . argument_list ) }, <, 
{ factor -> Identifier ( . argument_list ) }, ==, 
{ factor -> Identifier ( . argument_list ) }, >=, 
{ factor -> Identifier ( . argument_list ) }, <=, 
{ factor -> Identifier ( . argument_list ) }, !=, 

项目集I67:
{ expression -> add_expression == . add_expression }, ;, 
{ add_expression -> . item }, ;, 
{ add_expression -> . item + add_expression }, ;, 
{ add_expression -> . item - add_expression }, ;, 
{ item -> . factor }, ;, 
{ item -> . factor * item }, ;, 
{ item -> . factor / item }, ;, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ;, 
{ factor -> . ( expression ) }, ;, 
{ factor -> . Identifier ( argument_list ) }, ;, 
{ factor -> . Identifier }, ;, 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I68:
{ expression -> add_expression != . add_expression }, ;, 
{ add_expression -> . item }, ;, 
{ add_expression -> . item + add_expression }, ;, 
{ add_expression -> . item - add_expression }, ;, 
{ item -> . factor }, ;, 
{ item -> . factor * item }, ;, 
{ item -> . factor / item }, ;, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ;, 
{ factor -> . ( expression ) }, ;, 
{ factor -> . Identifier ( argument_list ) }, ;, 
{ factor -> . Identifier }, ;, 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I69:
{ expression -> add_expression > . add_expression }, ;, 
{ add_expression -> . item }, ;, 
{ add_expression -> . item + add_expression }, ;, 
{ add_expression -> . item - add_expression }, ;, 
{ item -> . factor }, ;, 
{ item -> . factor * item }, ;, 
{ item -> . factor / item }, ;, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ;, 
{ factor -> . ( expression ) }, ;, 
{ factor -> . Identifier ( argument_list ) }, ;, 
{ factor -> . Identifier }, ;, 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I70:
{ expression -> add_expression < . add_expression }, ;, 
{ add_expression -> . item }, ;, 
{ add_expression -> . item + add_expression }, ;, 
{ add_expression -> . item - add_expression }, ;, 
{ item -> . factor }, ;, 
{ item -> . factor * item }, ;, 
{ item -> . factor / item }, ;, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ;, 
{ factor -> . ( expression ) }, ;, 
{ factor -> . Identifier ( argument_list ) }, ;, 
{ factor -> . Identifier }, ;, 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I71:
{ expression -> add_expression >= . add_expression }, ;, 
{ add_expression -> . item }, ;, 
{ add_expression -> . item + add_expression }, ;, 
{ add_expression -> . item - add_expression }, ;, 
{ item -> . factor }, ;, 
{ item -> . factor * item }, ;, 
{ item -> . factor / item }, ;, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ;, 
{ factor -> . ( expression ) }, ;, 
{ factor -> . Identifier ( argument_list ) }, ;, 
{ factor -> . Identifier }, ;, 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I72:
{ expression -> add_expression <= . add_expression }, ;, 
{ add_expression -> . item }, ;, 
{ add_expression -> . item + add_expression }, ;, 
{ add_expression -> . item - add_expression }, ;, 
{ item -> . factor }, ;, 
{ item -> . factor * item }, ;, 
{ item -> . factor / item }, ;, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ;, 
{ factor -> . ( expression ) }, ;, 
{ factor -> . Identifier ( argument_list ) }, ;, 
{ factor -> . Identifier }, ;, 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I73:
{ return_sentence -> return expression ; . }, if, while, return, Identifier, 
{ return_sentence -> return expression ; . }, }, 

项目集I74:
{ item -> factor * . item }, ;, 
{ item -> . factor }, ;, 
{ item -> . factor * item }, ;, 
{ item -> . factor / item }, ;, 
{ factor -> . Integer }, ;, 
{ factor -> . ( expression ) }, ;, 
{ factor -> . Identifier ( argument_list ) }, ;, 
{ factor -> . Identifier }, ;, 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ item -> factor * . item }, +, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ item -> factor * . item }, -, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ item -> factor * . item }, >, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ item -> factor * . item }, <, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ item -> factor * . item }, ==, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ item -> factor * . item }, >=, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ item -> factor * . item }, <=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ item -> factor * . item }, !=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 

项目集I75:
{ item -> factor / . item }, ;, 
{ item -> . factor }, ;, 
{ item -> . factor * item }, ;, 
{ item -> . factor / item }, ;, 
{ factor -> . Integer }, ;, 
{ factor -> . ( expression ) }, ;, 
{ factor -> . Identifier ( argument_list ) }, ;, 
{ factor -> . Identifier }, ;, 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ item -> factor / . item }, +, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ item -> factor / . item }, -, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ item -> factor / . item }, >, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ item -> factor / . item }, <, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ item -> factor / . item }, ==, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ item -> factor / . item }, >=, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ item -> factor / . item }, <=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ item -> factor / . item }, !=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 

项目集I76:
{ add_expression -> item + . add_expression }, ;, 
{ add_expression -> . item }, ;, 
{ add_expression -> . item + add_expression }, ;, 
{ add_expression -> . item - add_expression }, ;, 
{ item -> . factor }, ;, 
{ item -> . factor * item }, ;, 
{ item -> . factor / item }, ;, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ;, 
{ factor -> . ( expression ) }, ;, 
{ factor -> . Identifier ( argument_list ) }, ;, 
{ factor -> . Identifier }, ;, 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ add_expression -> item + . add_expression }, >, 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ add_expression -> item + . add_expression }, <, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ add_expression -> item + . add_expression }, ==, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ add_expression -> item + . add_expression }, >=, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ add_expression -> item + . add_expression }, <=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ add_expression -> item + . add_expression }, !=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 

项目集I77:
{ add_expression -> item - . add_expression }, ;, 
{ add_expression -> . item }, ;, 
{ add_expression -> . item + add_expression }, ;, 
{ add_expression -> . item - add_expression }, ;, 
{ item -> . factor }, ;, 
{ item -> . factor * item }, ;, 
{ item -> . factor / item }, ;, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ;, 
{ factor -> . ( expression ) }, ;, 
{ factor -> . Identifier ( argument_list ) }, ;, 
{ factor -> . Identifier }, ;, 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ add_expression -> item - . add_expression }, >, 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ add_expression -> item - . add_expression }, <, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ add_expression -> item - . add_expression }, ==, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ add_expression -> item - . add_expression }, >=, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ add_expression -> item - . add_expression }, <=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ add_expression -> item - . add_expression }, !=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 

项目集I78:
{ while_sentence -> while M ( . expression ) A sentence_block }, if, while, return, Identifier, 
{ expression -> . add_expression }, ), 
{ expression -> . add_expression > add_expression }, ), 
{ expression -> . add_expression < add_expression }, ), 
{ expression -> . add_expression == add_expression }, ), 
{ expression -> . add_expression >= add_expression }, ), 
{ expression -> . add_expression <= add_expression }, ), 
{ expression -> . add_expression != add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ while_sentence -> while M ( . expression ) A sentence_block }, }, 

项目集I79:
{ assign_sentence -> Identifier = expression . ; }, if, while, return, Identifier, 
{ assign_sentence -> Identifier = expression . ; }, }, 

项目集I80:
{ sentence_list -> sentence M sentence_list . }, }, 

项目集I81:
{ factor -> ( expression . ) }, ), 
{ factor -> ( expression . ) }, *, 
{ factor -> ( expression . ) }, /, 
{ factor -> ( expression . ) }, +, 
{ factor -> ( expression . ) }, -, 
{ factor -> ( expression . ) }, >, 
{ factor -> ( expression . ) }, <, 
{ factor -> ( expression . ) }, ==, 
{ factor -> ( expression . ) }, >=, 
{ factor -> ( expression . ) }, <=, 
{ factor -> ( expression . ) }, !=, 

项目集I82:
{ factor -> Identifier ( . argument_list ) }, ), 
{ argument_list -> . }, ), 
{ argument_list -> . expression }, ), 
{ argument_list -> . expression , argument_list }, ), 
{ expression -> . add_expression }, ), 
{ expression -> . add_expression > add_expression }, ), 
{ expression -> . add_expression < add_expression }, ), 
{ expression -> . add_expression == add_expression }, ), 
{ expression -> . add_expression >= add_expression }, ), 
{ expression -> . add_expression <= add_expression }, ), 
{ expression -> . add_expression != add_expression }, ), 
{ expression -> . add_expression }, ,, 
{ expression -> . add_expression > add_expression }, ,, 
{ expression -> . add_expression < add_expression }, ,, 
{ expression -> . add_expression == add_expression }, ,, 
{ expression -> . add_expression >= add_expression }, ,, 
{ expression -> . add_expression <= add_expression }, ,, 
{ expression -> . add_expression != add_expression }, ,, 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 
{ factor -> Identifier ( . argument_list ) }, *, 
{ factor -> Identifier ( . argument_list ) }, /, 
{ factor -> Identifier ( . argument_list ) }, +, 
{ factor -> Identifier ( . argument_list ) }, -, 
{ factor -> Identifier ( . argument_list ) }, >, 
{ factor -> Identifier ( . argument_list ) }, <, 
{ factor -> Identifier ( . argument_list ) }, ==, 
{ factor -> Identifier ( . argument_list ) }, >=, 
{ factor -> Identifier ( . argument_list ) }, <=, 
{ factor -> Identifier ( . argument_list ) }, !=, 

项目集I83:
{ expression -> add_expression == . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I84:
{ expression -> add_expression != . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I85:
{ expression -> add_expression > . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I86:
{ expression -> add_expression < . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I87:
{ expression -> add_expression >= . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I88:
{ expression -> add_expression <= . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I89:
{ if_sentence -> if ( expression ) . A sentence_block }, if, while, return, Identifier, 
{ A -> . }, {, 
{ if_sentence -> if ( expression ) . A sentence_block N else M A sentence_block }, if, while, return, Identifier, 
{ if_sentence -> if ( expression ) . A sentence_block }, }, 
{ if_sentence -> if ( expression ) . A sentence_block N else M A sentence_block }, }, 

项目集I90:
{ item -> factor * . item }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ item -> factor * . item }, +, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ item -> factor * . item }, -, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ item -> factor * . item }, >, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ item -> factor * . item }, <, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ item -> factor * . item }, ==, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ item -> factor * . item }, >=, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ item -> factor * . item }, <=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ item -> factor * . item }, !=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 

项目集I91:
{ item -> factor / . item }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ item -> factor / . item }, +, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ item -> factor / . item }, -, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ item -> factor / . item }, >, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ item -> factor / . item }, <, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ item -> factor / . item }, ==, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ item -> factor / . item }, >=, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ item -> factor / . item }, <=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ item -> factor / . item }, !=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 

项目集I92:
{ add_expression -> item + . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ add_expression -> item + . add_expression }, >, 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ add_expression -> item + . add_expression }, <, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ add_expression -> item + . add_expression }, ==, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ add_expression -> item + . add_expression }, >=, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ add_expression -> item + . add_expression }, <=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ add_expression -> item + . add_expression }, !=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 

项目集I93:
{ add_expression -> item - . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ add_expression -> item - . add_expression }, >, 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ add_expression -> item - . add_expression }, <, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ add_expression -> item - . add_expression }, ==, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ add_expression -> item - . add_expression }, >=, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ add_expression -> item - . add_expression }, <=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ add_expression -> item - . add_expression }, !=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 

项目集I94:
{ factor -> ( expression ) . }, ;, 
{ factor -> ( expression ) . }, *, 
{ factor -> ( expression ) . }, /, 
{ factor -> ( expression ) . }, +, 
{ factor -> ( expression ) . }, -, 
{ factor -> ( expression ) . }, >, 
{ factor -> ( expression ) . }, <, 
{ factor -> ( expression ) . }, ==, 
{ factor -> ( expression ) . }, >=, 
{ factor -> ( expression ) . }, <=, 
{ factor -> ( expression ) . }, !=, 

项目集I95:
{ factor -> Integer . }, ), 
{ factor -> Integer . }, *, 
{ factor -> Integer . }, /, 
{ factor -> Integer . }, +, 
{ factor -> Integer . }, -, 
{ factor -> Integer . }, >, 
{ factor -> Integer . }, <, 
{ factor -> Integer . }, ==, 
{ factor -> Integer . }, >=, 
{ factor -> Integer . }, <=, 
{ factor -> Integer . }, !=, 
{ factor -> Integer . }, ,, 

项目集I96:
{ factor -> ( . expression ) }, ), 
{ expression -> . add_expression }, ), 
{ expression -> . add_expression > add_expression }, ), 
{ expression -> . add_expression < add_expression }, ), 
{ expression -> . add_expression == add_expression }, ), 
{ expression -> . add_expression >= add_expression }, ), 
{ expression -> . add_expression <= add_expression }, ), 
{ expression -> . add_expression != add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ factor -> ( . expression ) }, *, 
{ factor -> ( . expression ) }, /, 
{ factor -> ( . expression ) }, +, 
{ factor -> ( . expression ) }, -, 
{ factor -> ( . expression ) }, >, 
{ factor -> ( . expression ) }, <, 
{ factor -> ( . expression ) }, ==, 
{ factor -> ( . expression ) }, >=, 
{ factor -> ( . expression ) }, <=, 
{ factor -> ( . expression ) }, !=, 
{ factor -> ( . expression ) }, ,, 

项目集I97:
{ factor -> Identifier . ( argument_list ) }, ), 
{ factor -> Identifier . }, ), 
{ factor -> Identifier . ( argument_list ) }, *, 
{ factor -> Identifier . }, *, 
{ factor -> Identifier . ( argument_list ) }, /, 
{ factor -> Identifier . }, /, 
{ factor -> Identifier . ( argument_list ) }, +, 
{ factor -> Identifier . }, +, 
{ factor -> Identifier . ( argument_list ) }, -, 
{ factor -> Identifier . }, -, 
{ factor -> Identifier . ( argument_list ) }, >, 
{ factor -> Identifier . }, >, 
{ factor -> Identifier . ( argument_list ) }, <, 
{ factor -> Identifier . }, <, 
{ factor -> Identifier . ( argument_list ) }, ==, 
{ factor -> Identifier . }, ==, 
{ factor -> Identifier . ( argument_list ) }, >=, 
{ factor -> Identifier . }, >=, 
{ factor -> Identifier . ( argument_list ) }, <=, 
{ factor -> Identifier . }, <=, 
{ factor -> Identifier . ( argument_list ) }, !=, 
{ factor -> Identifier . }, !=, 
{ factor -> Identifier . ( argument_list ) }, ,, 
{ factor -> Identifier . }, ,, 

项目集I98:
{ expression -> add_expression . }, ), 
{ expression -> add_expression . > add_expression }, ), 
{ expression -> add_expression . < add_expression }, ), 
{ expression -> add_expression . == add_expression }, ), 
{ expression -> add_expression . >= add_expression }, ), 
{ expression -> add_expression . <= add_expression }, ), 
{ expression -> add_expression . != add_expression }, ), 
{ expression -> add_expression . }, ,, 
{ expression -> add_expression . > add_expression }, ,, 
{ expression -> add_expression . < add_expression }, ,, 
{ expression -> add_expression . == add_expression }, ,, 
{ expression -> add_expression . >= add_expression }, ,, 
{ expression -> add_expression . <= add_expression }, ,, 
{ expression -> add_expression . != add_expression }, ,, 

项目集I99:
{ factor -> Identifier ( argument_list . ) }, ;, 
{ factor -> Identifier ( argument_list . ) }, *, 
{ factor -> Identifier ( argument_list . ) }, /, 
{ factor -> Identifier ( argument_list . ) }, +, 
{ factor -> Identifier ( argument_list . ) }, -, 
{ factor -> Identifier ( argument_list . ) }, >, 
{ factor -> Identifier ( argument_list . ) }, <, 
{ factor -> Identifier ( argument_list . ) }, ==, 
{ factor -> Identifier ( argument_list . ) }, >=, 
{ factor -> Identifier ( argument_list . ) }, <=, 
{ factor -> Identifier ( argument_list . ) }, !=, 

项目集I100:
{ argument_list -> expression . }, ), 
{ argument_list -> expression . , argument_list }, ), 

项目集I101:
{ item -> factor . }, ), 
{ item -> factor . * item }, ), 
{ item -> factor . / item }, ), 
{ item -> factor . }, +, 
{ item -> factor . * item }, +, 
{ item -> factor . / item }, +, 
{ item -> factor . }, -, 
{ item -> factor . * item }, -, 
{ item -> factor . / item }, -, 
{ item -> factor . }, >, 
{ item -> factor . * item }, >, 
{ item -> factor . / item }, >, 
{ item -> factor . }, <, 
{ item -> factor . * item }, <, 
{ item -> factor . / item }, <, 
{ item -> factor . }, ==, 
{ item -> factor . * item }, ==, 
{ item -> factor . / item }, ==, 
{ item -> factor . }, >=, 
{ item -> factor . * item }, >=, 
{ item -> factor . / item }, >=, 
{ item -> factor . }, <=, 
{ item -> factor . * item }, <=, 
{ item -> factor . / item }, <=, 
{ item -> factor . }, !=, 
{ item -> factor . * item }, !=, 
{ item -> factor . / item }, !=, 
{ item -> factor . }, ,, 
{ item -> factor . * item }, ,, 
{ item -> factor . / item }, ,, 

项目集I102:
{ add_expression -> item . }, ), 
{ add_expression -> item . + add_expression }, ), 
{ add_expression -> item . - add_expression }, ), 
{ add_expression -> item . }, >, 
{ add_expression -> item . + add_expression }, >, 
{ add_expression -> item . - add_expression }, >, 
{ add_expression -> item . }, <, 
{ add_expression -> item . + add_expression }, <, 
{ add_expression -> item . - add_expression }, <, 
{ add_expression -> item . }, ==, 
{ add_expression -> item . + add_expression }, ==, 
{ add_expression -> item . - add_expression }, ==, 
{ add_expression -> item . }, >=, 
{ add_expression -> item . + add_expression }, >=, 
{ add_expression -> item . - add_expression }, >=, 
{ add_expression -> item . }, <=, 
{ add_expression -> item . + add_expression }, <=, 
{ add_expression -> item . - add_expression }, <=, 
{ add_expression -> item . }, !=, 
{ add_expression -> item . + add_expression }, !=, 
{ add_expression -> item . - add_expression }, !=, 
{ add_expression -> item . }, ,, 
{ add_expression -> item . + add_expression }, ,, 
{ add_expression -> item . - add_expression }, ,, 

项目集I103:
{ factor -> Integer . }, ;, 
{ factor -> Integer . }, *, 
{ factor -> Integer . }, /, 
{ factor -> Integer . }, +, 
{ factor -> Integer . }, -, 

项目集I104:
{ factor -> ( . expression ) }, ;, 
{ expression -> . add_expression }, ), 
{ expression -> . add_expression > add_expression }, ), 
{ expression -> . add_expression < add_expression }, ), 
{ expression -> . add_expression == add_expression }, ), 
{ expression -> . add_expression >= add_expression }, ), 
{ expression -> . add_expression <= add_expression }, ), 
{ expression -> . add_expression != add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ factor -> ( . expression ) }, *, 
{ factor -> ( . expression ) }, /, 
{ factor -> ( . expression ) }, +, 
{ factor -> ( . expression ) }, -, 

项目集I105:
{ factor -> Identifier . ( argument_list ) }, ;, 
{ factor -> Identifier . }, ;, 
{ factor -> Identifier . ( argument_list ) }, *, 
{ factor -> Identifier . }, *, 
{ factor -> Identifier . ( argument_list ) }, /, 
{ factor -> Identifier . }, /, 
{ factor -> Identifier . ( argument_list ) }, +, 
{ factor -> Identifier . }, +, 
{ factor -> Identifier . ( argument_list ) }, -, 
{ factor -> Identifier . }, -, 

项目集I106:
{ expression -> add_expression == add_expression . }, ;, 

项目集I107:
{ item -> factor . }, ;, 
{ item -> factor . * item }, ;, 
{ item -> factor . / item }, ;, 
{ item -> factor . }, +, 
{ item -> factor . * item }, +, 
{ item -> factor . / item }, +, 
{ item -> factor . }, -, 
{ item -> factor . * item }, -, 
{ item -> factor . / item }, -, 

项目集I108:
{ add_expression -> item . }, ;, 
{ add_expression -> item . + add_expression }, ;, 
{ add_expression -> item . - add_expression }, ;, 

项目集I109:
{ expression -> add_expression != add_expression . }, ;, 

项目集I110:
{ expression -> add_expression > add_expression . }, ;, 

项目集I111:
{ expression -> add_expression < add_expression . }, ;, 

项目集I112:
{ expression -> add_expression >= add_expression . }, ;, 

项目集I113:
{ expression -> add_expression <= add_expression . }, ;, 

项目集I114:
{ item -> factor * item . }, ;, 
{ item -> factor * item . }, +, 
{ item -> factor * item . }, -, 
{ item -> factor * item . }, >, 
{ item -> factor * item . }, <, 
{ item -> factor * item . }, ==, 
{ item -> factor * item . }, >=, 
{ item -> factor * item . }, <=, 
{ item -> factor * item . }, !=, 

项目集I115:
{ item -> factor / item . }, ;, 
{ item -> factor / item . }, +, 
{ item -> factor / item . }, -, 
{ item -> factor / item . }, >, 
{ item -> factor / item . }, <, 
{ item -> factor / item . }, ==, 
{ item -> factor / item . }, >=, 
{ item -> factor / item . }, <=, 
{ item -> factor / item . }, !=, 

项目集I116:
{ add_expression -> item + add_expression . }, ;, 
{ add_expression -> item + add_expression . }, >, 
{ add_expression -> item + add_expression . }, <, 
{ add_expression -> item + add_expression . }, ==, 
{ add_expression -> item + add_expression . }, >=, 
{ add_expression -> item + add_expression . }, <=, 
{ add_expression -> item + add_expression . }, !=, 

项目集I117:
{ add_expression -> item - add_expression . }, ;, 
{ add_expression -> item - add_expression . }, >, 
{ add_expression -> item - add_expression . }, <, 
{ add_expression -> item - add_expression . }, ==, 
{ add_expression -> item - add_expression . }, >=, 
{ add_expression -> item - add_expression . }, <=, 
{ add_expression -> item - add_expression . }, !=, 

项目集I118:
{ while_sentence -> while M ( expression . ) A sentence_block }, if, while, return, Identifier, 
{ while_sentence -> while M ( expression . ) A sentence_block }, }, 

项目集I119:
{ assign_sentence -> Identifier = expression ; . }, if, while, return, Identifier, 
{ assign_sentence -> Identifier = expression ; . }, }, 

项目集I120:
{ factor -> ( expression ) . }, ), 
{ factor -> ( expression ) . }, *, 
{ factor -> ( expression ) . }, /, 
{ factor -> ( expression ) . }, +, 
{ factor -> ( expression ) . }, -, 
{ factor -> ( expression ) . }, >, 
{ factor -> ( expression ) . }, <, 
{ factor -> ( expression ) . }, ==, 
{ factor -> ( expression ) . }, >=, 
{ factor -> ( expression ) . }, <=, 
{ factor -> ( expression ) . }, !=, 

项目集I121:
{ factor -> Identifier ( argument_list . ) }, ), 
{ factor -> Identifier ( argument_list . ) }, *, 
{ factor -> Identifier ( argument_list . ) }, /, 
{ factor -> Identifier ( argument_list . ) }, +, 
{ factor -> Identifier ( argument_list . ) }, -, 
{ factor -> Identifier ( argument_list . ) }, >, 
{ factor -> Identifier ( argument_list . ) }, <, 
{ factor -> Identifier ( argument_list . ) }, ==, 
{ factor -> Identifier ( argument_list . ) }, >=, 
{ factor -> Identifier ( argument_list . ) }, <=, 
{ factor -> Identifier ( argument_list . ) }, !=, 

项目集I122:
{ factor -> Integer . }, ), 
{ factor -> Integer . }, *, 
{ factor -> Integer . }, /, 
{ factor -> Integer . }, +, 
{ factor -> Integer . }, -, 

项目集I123:
{ factor -> ( . expression ) }, ), 
{ expression -> . add_expression }, ), 
{ expression -> . add_expression > add_expression }, ), 
{ expression -> . add_expression < add_expression }, ), 
{ expression -> . add_expression == add_expression }, ), 
{ expression -> . add_expression >= add_expression }, ), 
{ expression -> . add_expression <= add_expression }, ), 
{ expression -> . add_expression != add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ factor -> ( . expression ) }, *, 
{ factor -> ( . expression ) }, /, 
{ factor -> ( . expression ) }, +, 
{ factor -> ( . expression ) }, -, 

项目集I124:
{ factor -> Identifier . ( argument_list ) }, ), 
{ factor -> Identifier . }, ), 
{ factor -> Identifier . ( argument_list ) }, *, 
{ factor -> Identifier . }, *, 
{ factor -> Identifier . ( argument_list ) }, /, 
{ factor -> Identifier . }, /, 
{ factor -> Identifier . ( argument_list ) }, +, 
{ factor -> Identifier . }, +, 
{ factor -> Identifier . ( argument_list ) }, -, 
{ factor -> Identifier . }, -, 

项目集I125:
{ expression -> add_expression == add_expression . }, ), 

项目集I126:
{ item -> factor . }, ), 
{ item -> factor . * item }, ), 
{ item -> factor . / item }, ), 
{ item -> factor . }, +, 
{ item -> factor . * item }, +, 
{ item -> factor . / item }, +, 
{ item -> factor . }, -, 
{ item -> factor . * item }, -, 
{ item -> factor . / item }, -, 

项目集I127:
{ add_expression -> item . }, ), 
{ add_expression -> item . + add_expression }, ), 
{ add_expression -> item . - add_expression }, ), 

项目集I128:
{ expression -> add_expression != add_expression . }, ), 

项目集I129:
{ expression -> add_expression > add_expression . }, ), 

项目集I130:
{ expression -> add_expression < add_expression . }, ), 

项目集I131:
{ expression -> add_expression >= add_expression . }, ), 

项目集I132:
{ expression -> add_expression <= add_expression . }, ), 

项目集I133:
{ if_sentence -> if ( expression ) A . sentence_block }, if, while, return, Identifier, 
{ sentence_block -> . { inner_declare sentence_list } }, if, while, return, Identifier, 
{ if_sentence -> if ( expression ) A . sentence_block N else M A sentence_block }, if, while, return, Identifier, 
{ sentence_block -> . { inner_declare sentence_list } }, else, 
{ if_sentence -> if ( expression ) A . sentence_block }, }, 
{ sentence_block -> . { inner_declare sentence_list } }, }, 
{ if_sentence -> if ( expression ) A . sentence_block N else M A sentence_block }, }, 

项目集I134:
{ item -> factor * item . }, ), 
{ item -> factor * item . }, +, 
{ item -> factor * item . }, -, 
{ item -> factor * item . }, >, 
{ item -> factor * item . }, <, 
{ item -> factor * item . }, ==, 
{ item -> factor * item . }, >=, 
{ item -> factor * item . }, <=, 
{ item -> factor * item . }, !=, 

项目集I135:
{ item -> factor / item . }, ), 
{ item -> factor / item . }, +, 
{ item -> factor / item . }, -, 
{ item -> factor / item . }, >, 
{ item -> factor / item . }, <, 
{ item -> factor / item . }, ==, 
{ item -> factor / item . }, >=, 
{ item -> factor / item . }, <=, 
{ item -> factor / item . }, !=, 

项目集I136:
{ add_expression -> item + add_expression . }, ), 
{ add_expression -> item + add_expression . }, >, 
{ add_expression -> item + add_expression . }, <, 
{ add_expression -> item + add_expression . }, ==, 
{ add_expression -> item + add_expression . }, >=, 
{ add_expression -> item + add_expression . }, <=, 
{ add_expression -> item + add_expression . }, !=, 

项目集I137:
{ add_expression -> item - add_expression . }, ), 
{ add_expression -> item - add_expression . }, >, 
{ add_expression -> item - add_expression . }, <, 
{ add_expression -> item - add_expression . }, ==, 
{ add_expression -> item - add_expression . }, >=, 
{ add_expression -> item - add_expression . }, <=, 
{ add_expression -> item - add_expression . }, !=, 

项目集I138:
{ factor -> ( expression . ) }, ), 
{ factor -> ( expression . ) }, *, 
{ factor -> ( expression . ) }, /, 
{ factor -> ( expression . ) }, +, 
{ factor -> ( expression . ) }, -, 
{ factor -> ( expression . ) }, >, 
{ factor -> ( expression . ) }, <, 
{ factor -> ( expression . ) }, ==, 
{ factor -> ( expression . ) }, >=, 
{ factor -> ( expression . ) }, <=, 
{ factor -> ( expression . ) }, !=, 
{ factor -> ( expression . ) }, ,, 

项目集I139:
{ factor -> Identifier ( . argument_list ) }, ), 
{ argument_list -> . }, ), 
{ argument_list -> . expression }, ), 
{ argument_list -> . expression , argument_list }, ), 
{ expression -> . add_expression }, ), 
{ expression -> . add_expression > add_expression }, ), 
{ expression -> . add_expression < add_expression }, ), 
{ expression -> . add_expression == add_expression }, ), 
{ expression -> . add_expression >= add_expression }, ), 
{ expression -> . add_expression <= add_expression }, ), 
{ expression -> . add_expression != add_expression }, ), 
{ expression -> . add_expression }, ,, 
{ expression -> . add_expression > add_expression }, ,, 
{ expression -> . add_expression < add_expression }, ,, 
{ expression -> . add_expression == add_expression }, ,, 
{ expression -> . add_expression >= add_expression }, ,, 
{ expression -> . add_expression <= add_expression }, ,, 
{ expression -> . add_expression != add_expression }, ,, 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 
{ factor -> Identifier ( . argument_list ) }, *, 
{ factor -> Identifier ( . argument_list ) }, /, 
{ factor -> Identifier ( . argument_list ) }, +, 
{ factor -> Identifier ( . argument_list ) }, -, 
{ factor -> Identifier ( . argument_list ) }, >, 
{ factor -> Identifier ( . argument_list ) }, <, 
{ factor -> Identifier ( . argument_list ) }, ==, 
{ factor -> Identifier ( . argument_list ) }, >=, 
{ factor -> Identifier ( . argument_list ) }, <=, 
{ factor -> Identifier ( . argument_list ) }, !=, 
{ factor -> Identifier ( . argument_list ) }, ,, 

项目集I140:
{ expression -> add_expression == . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ expression -> add_expression == . add_expression }, ,, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 

项目集I141:
{ expression -> add_expression != . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ expression -> add_expression != . add_expression }, ,, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 

项目集I142:
{ expression -> add_expression > . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ expression -> add_expression > . add_expression }, ,, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 

项目集I143:
{ expression -> add_expression < . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ expression -> add_expression < . add_expression }, ,, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 

项目集I144:
{ expression -> add_expression >= . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ expression -> add_expression >= . add_expression }, ,, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 

项目集I145:
{ expression -> add_expression <= . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ expression -> add_expression <= . add_expression }, ,, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 

项目集I146:
{ factor -> Identifier ( argument_list ) . }, ;, 
{ factor -> Identifier ( argument_list ) . }, *, 
{ factor -> Identifier ( argument_list ) . }, /, 
{ factor -> Identifier ( argument_list ) . }, +, 
{ factor -> Identifier ( argument_list ) . }, -, 
{ factor -> Identifier ( argument_list ) . }, >, 
{ factor -> Identifier ( argument_list ) . }, <, 
{ factor -> Identifier ( argument_list ) . }, ==, 
{ factor -> Identifier ( argument_list ) . }, >=, 
{ factor -> Identifier ( argument_list ) . }, <=, 
{ factor -> Identifier ( argument_list ) . }, !=, 

项目集I147:
{ argument_list -> expression , . argument_list }, ), 
{ argument_list -> . }, ), 
{ argument_list -> . expression }, ), 
{ argument_list -> . expression , argument_list }, ), 
{ expression -> . add_expression }, ), 
{ expression -> . add_expression > add_expression }, ), 
{ expression -> . add_expression < add_expression }, ), 
{ expression -> . add_expression == add_expression }, ), 
{ expression -> . add_expression >= add_expression }, ), 
{ expression -> . add_expression <= add_expression }, ), 
{ expression -> . add_expression != add_expression }, ), 
{ expression -> . add_expression }, ,, 
{ expression -> . add_expression > add_expression }, ,, 
{ expression -> . add_expression < add_expression }, ,, 
{ expression -> . add_expression == add_expression }, ,, 
{ expression -> . add_expression >= add_expression }, ,, 
{ expression -> . add_expression <= add_expression }, ,, 
{ expression -> . add_expression != add_expression }, ,, 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 

项目集I148:
{ item -> factor * . item }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ item -> factor * . item }, +, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ item -> factor * . item }, -, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ item -> factor * . item }, >, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ item -> factor * . item }, <, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ item -> factor * . item }, ==, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ item -> factor * . item }, >=, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ item -> factor * . item }, <=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ item -> factor * . item }, !=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ item -> factor * . item }, ,, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 

项目集I149:
{ item -> factor / . item }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ item -> factor / . item }, +, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ item -> factor / . item }, -, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ item -> factor / . item }, >, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ item -> factor / . item }, <, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ item -> factor / . item }, ==, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ item -> factor / . item }, >=, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ item -> factor / . item }, <=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ item -> factor / . item }, !=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ item -> factor / . item }, ,, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 

项目集I150:
{ add_expression -> item + . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ add_expression -> item + . add_expression }, >, 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ add_expression -> item + . add_expression }, <, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ add_expression -> item + . add_expression }, ==, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ add_expression -> item + . add_expression }, >=, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ add_expression -> item + . add_expression }, <=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ add_expression -> item + . add_expression }, !=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ add_expression -> item + . add_expression }, ,, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 

项目集I151:
{ add_expression -> item - . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ add_expression -> item - . add_expression }, >, 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ add_expression -> item - . add_expression }, <, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ add_expression -> item - . add_expression }, ==, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ add_expression -> item - . add_expression }, >=, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ add_expression -> item - . add_expression }, <=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ add_expression -> item - . add_expression }, !=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ add_expression -> item - . add_expression }, ,, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 

项目集I152:
{ factor -> ( expression . ) }, ;, 
{ factor -> ( expression . ) }, *, 
{ factor -> ( expression . ) }, /, 
{ factor -> ( expression . ) }, +, 
{ factor -> ( expression . ) }, -, 

项目集I153:
{ factor -> Identifier ( . argument_list ) }, ;, 
{ argument_list -> . }, ), 
{ argument_list -> . expression }, ), 
{ argument_list -> . expression , argument_list }, ), 
{ expression -> . add_expression }, ), 
{ expression -> . add_expression > add_expression }, ), 
{ expression -> . add_expression < add_expression }, ), 
{ expression -> . add_expression == add_expression }, ), 
{ expression -> . add_expression >= add_expression }, ), 
{ expression -> . add_expression <= add_expression }, ), 
{ expression -> . add_expression != add_expression }, ), 
{ expression -> . add_expression }, ,, 
{ expression -> . add_expression > add_expression }, ,, 
{ expression -> . add_expression < add_expression }, ,, 
{ expression -> . add_expression == add_expression }, ,, 
{ expression -> . add_expression >= add_expression }, ,, 
{ expression -> . add_expression <= add_expression }, ,, 
{ expression -> . add_expression != add_expression }, ,, 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 
{ factor -> Identifier ( . argument_list ) }, *, 
{ factor -> Identifier ( . argument_list ) }, /, 
{ factor -> Identifier ( . argument_list ) }, +, 
{ factor -> Identifier ( . argument_list ) }, -, 

项目集I154:
{ item -> factor * . item }, ;, 
{ item -> . factor }, ;, 
{ item -> . factor * item }, ;, 
{ item -> . factor / item }, ;, 
{ factor -> . Integer }, ;, 
{ factor -> . ( expression ) }, ;, 
{ factor -> . Identifier ( argument_list ) }, ;, 
{ factor -> . Identifier }, ;, 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ item -> factor * . item }, +, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ item -> factor * . item }, -, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I155:
{ item -> factor / . item }, ;, 
{ item -> . factor }, ;, 
{ item -> . factor * item }, ;, 
{ item -> . factor / item }, ;, 
{ factor -> . Integer }, ;, 
{ factor -> . ( expression ) }, ;, 
{ factor -> . Identifier ( argument_list ) }, ;, 
{ factor -> . Identifier }, ;, 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ item -> factor / . item }, +, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ item -> factor / . item }, -, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I156:
{ add_expression -> item + . add_expression }, ;, 
{ add_expression -> . item }, ;, 
{ add_expression -> . item + add_expression }, ;, 
{ add_expression -> . item - add_expression }, ;, 
{ item -> . factor }, ;, 
{ item -> . factor * item }, ;, 
{ item -> . factor / item }, ;, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ;, 
{ factor -> . ( expression ) }, ;, 
{ factor -> . Identifier ( argument_list ) }, ;, 
{ factor -> . Identifier }, ;, 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I157:
{ add_expression -> item - . add_expression }, ;, 
{ add_expression -> . item }, ;, 
{ add_expression -> . item + add_expression }, ;, 
{ add_expression -> . item - add_expression }, ;, 
{ item -> . factor }, ;, 
{ item -> . factor * item }, ;, 
{ item -> . factor / item }, ;, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ;, 
{ factor -> . ( expression ) }, ;, 
{ factor -> . Identifier ( argument_list ) }, ;, 
{ factor -> . Identifier }, ;, 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I158:
{ while_sentence -> while M ( expression ) . A sentence_block }, if, while, return, Identifier, 
{ A -> . }, {, 
{ while_sentence -> while M ( expression ) . A sentence_block }, }, 

项目集I159:
{ factor -> Identifier ( argument_list ) . }, ), 
{ factor -> Identifier ( argument_list ) . }, *, 
{ factor -> Identifier ( argument_list ) . }, /, 
{ factor -> Identifier ( argument_list ) . }, +, 
{ factor -> Identifier ( argument_list ) . }, -, 
{ factor -> Identifier ( argument_list ) . }, >, 
{ factor -> Identifier ( argument_list ) . }, <, 
{ factor -> Identifier ( argument_list ) . }, ==, 
{ factor -> Identifier ( argument_list ) . }, >=, 
{ factor -> Identifier ( argument_list ) . }, <=, 
{ factor -> Identifier ( argument_list ) . }, !=, 

项目集I160:
{ factor -> ( expression . ) }, ), 
{ factor -> ( expression . ) }, *, 
{ factor -> ( expression . ) }, /, 
{ factor -> ( expression . ) }, +, 
{ factor -> ( expression . ) }, -, 

项目集I161:
{ factor -> Identifier ( . argument_list ) }, ), 
{ argument_list -> . }, ), 
{ argument_list -> . expression }, ), 
{ argument_list -> . expression , argument_list }, ), 
{ expression -> . add_expression }, ), 
{ expression -> . add_expression > add_expression }, ), 
{ expression -> . add_expression < add_expression }, ), 
{ expression -> . add_expression == add_expression }, ), 
{ expression -> . add_expression >= add_expression }, ), 
{ expression -> . add_expression <= add_expression }, ), 
{ expression -> . add_expression != add_expression }, ), 
{ expression -> . add_expression }, ,, 
{ expression -> . add_expression > add_expression }, ,, 
{ expression -> . add_expression < add_expression }, ,, 
{ expression -> . add_expression == add_expression }, ,, 
{ expression -> . add_expression >= add_expression }, ,, 
{ expression -> . add_expression <= add_expression }, ,, 
{ expression -> . add_expression != add_expression }, ,, 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 
{ factor -> Identifier ( . argument_list ) }, *, 
{ factor -> Identifier ( . argument_list ) }, /, 
{ factor -> Identifier ( . argument_list ) }, +, 
{ factor -> Identifier ( . argument_list ) }, -, 

项目集I162:
{ item -> factor * . item }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ item -> factor * . item }, +, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ item -> factor * . item }, -, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I163:
{ item -> factor / . item }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ item -> factor / . item }, +, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ item -> factor / . item }, -, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I164:
{ add_expression -> item + . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I165:
{ add_expression -> item - . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 

项目集I166:
{ sentence_block -> { . inner_declare sentence_list } }, if, while, return, Identifier, 
{ inner_declare -> . }, if, while, return, Identifier, 
{ inner_declare -> . inner_var_declare ; inner_declare }, if, while, return, Identifier, 
{ inner_var_declare -> . int Identifier }, ;, 
{ sentence_block -> { . inner_declare sentence_list } }, else, 
{ sentence_block -> { . inner_declare sentence_list } }, }, 

项目集I167:
{ if_sentence -> if ( expression ) A sentence_block . }, if, while, return, Identifier, 
{ if_sentence -> if ( expression ) A sentence_block . N else M A sentence_block }, if, while, return, Identifier, 
{ N -> . }, else, 
{ if_sentence -> if ( expression ) A sentence_block . }, }, 
{ if_sentence -> if ( expression ) A sentence_block . N else M A sentence_block }, }, 

项目集I168:
{ factor -> ( expression ) . }, ), 
{ factor -> ( expression ) . }, *, 
{ factor -> ( expression ) . }, /, 
{ factor -> ( expression ) . }, +, 
{ factor -> ( expression ) . }, -, 
{ factor -> ( expression ) . }, >, 
{ factor -> ( expression ) . }, <, 
{ factor -> ( expression ) . }, ==, 
{ factor -> ( expression ) . }, >=, 
{ factor -> ( expression ) . }, <=, 
{ factor -> ( expression ) . }, !=, 
{ factor -> ( expression ) . }, ,, 

项目集I169:
{ factor -> Identifier ( argument_list . ) }, ), 
{ factor -> Identifier ( argument_list . ) }, *, 
{ factor -> Identifier ( argument_list . ) }, /, 
{ factor -> Identifier ( argument_list . ) }, +, 
{ factor -> Identifier ( argument_list . ) }, -, 
{ factor -> Identifier ( argument_list . ) }, >, 
{ factor -> Identifier ( argument_list . ) }, <, 
{ factor -> Identifier ( argument_list . ) }, ==, 
{ factor -> Identifier ( argument_list . ) }, >=, 
{ factor -> Identifier ( argument_list . ) }, <=, 
{ factor -> Identifier ( argument_list . ) }, !=, 
{ factor -> Identifier ( argument_list . ) }, ,, 

项目集I170:
{ factor -> Integer . }, ), 
{ factor -> Integer . }, *, 
{ factor -> Integer . }, /, 
{ factor -> Integer . }, +, 
{ factor -> Integer . }, -, 
{ factor -> Integer . }, ,, 

项目集I171:
{ factor -> ( . expression ) }, ), 
{ expression -> . add_expression }, ), 
{ expression -> . add_expression > add_expression }, ), 
{ expression -> . add_expression < add_expression }, ), 
{ expression -> . add_expression == add_expression }, ), 
{ expression -> . add_expression >= add_expression }, ), 
{ expression -> . add_expression <= add_expression }, ), 
{ expression -> . add_expression != add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ factor -> ( . expression ) }, *, 
{ factor -> ( . expression ) }, /, 
{ factor -> ( . expression ) }, +, 
{ factor -> ( . expression ) }, -, 
{ factor -> ( . expression ) }, ,, 

项目集I172:
{ factor -> Identifier . ( argument_list ) }, ), 
{ factor -> Identifier . }, ), 
{ factor -> Identifier . ( argument_list ) }, *, 
{ factor -> Identifier . }, *, 
{ factor -> Identifier . ( argument_list ) }, /, 
{ factor -> Identifier . }, /, 
{ factor -> Identifier . ( argument_list ) }, +, 
{ factor -> Identifier . }, +, 
{ factor -> Identifier . ( argument_list ) }, -, 
{ factor -> Identifier . }, -, 
{ factor -> Identifier . ( argument_list ) }, ,, 
{ factor -> Identifier . }, ,, 

项目集I173:
{ expression -> add_expression == add_expression . }, ), 
{ expression -> add_expression == add_expression . }, ,, 

项目集I174:
{ item -> factor . }, ), 
{ item -> factor . * item }, ), 
{ item -> factor . / item }, ), 
{ item -> factor . }, +, 
{ item -> factor . * item }, +, 
{ item -> factor . / item }, +, 
{ item -> factor . }, -, 
{ item -> factor . * item }, -, 
{ item -> factor . / item }, -, 
{ item -> factor . }, ,, 
{ item -> factor . * item }, ,, 
{ item -> factor . / item }, ,, 

项目集I175:
{ add_expression -> item . }, ), 
{ add_expression -> item . + add_expression }, ), 
{ add_expression -> item . - add_expression }, ), 
{ add_expression -> item . }, ,, 
{ add_expression -> item . + add_expression }, ,, 
{ add_expression -> item . - add_expression }, ,, 

项目集I176:
{ expression -> add_expression != add_expression . }, ), 
{ expression -> add_expression != add_expression . }, ,, 

项目集I177:
{ expression -> add_expression > add_expression . }, ), 
{ expression -> add_expression > add_expression . }, ,, 

项目集I178:
{ expression -> add_expression < add_expression . }, ), 
{ expression -> add_expression < add_expression . }, ,, 

项目集I179:
{ expression -> add_expression >= add_expression . }, ), 
{ expression -> add_expression >= add_expression . }, ,, 

项目集I180:
{ expression -> add_expression <= add_expression . }, ), 
{ expression -> add_expression <= add_expression . }, ,, 

项目集I181:
{ argument_list -> expression , argument_list . }, ), 

项目集I182:
{ item -> factor * item . }, ), 
{ item -> factor * item . }, +, 
{ item -> factor * item . }, -, 
{ item -> factor * item . }, >, 
{ item -> factor * item . }, <, 
{ item -> factor * item . }, ==, 
{ item -> factor * item . }, >=, 
{ item -> factor * item . }, <=, 
{ item -> factor * item . }, !=, 
{ item -> factor * item . }, ,, 

项目集I183:
{ item -> factor / item . }, ), 
{ item -> factor / item . }, +, 
{ item -> factor / item . }, -, 
{ item -> factor / item . }, >, 
{ item -> factor / item . }, <, 
{ item -> factor / item . }, ==, 
{ item -> factor / item . }, >=, 
{ item -> factor / item . }, <=, 
{ item -> factor / item . }, !=, 
{ item -> factor / item . }, ,, 

项目集I184:
{ add_expression -> item + add_expression . }, ), 
{ add_expression -> item + add_expression . }, >, 
{ add_expression -> item + add_expression . }, <, 
{ add_expression -> item + add_expression . }, ==, 
{ add_expression -> item + add_expression . }, >=, 
{ add_expression -> item + add_expression . }, <=, 
{ add_expression -> item + add_expression . }, !=, 
{ add_expression -> item + add_expression . }, ,, 

项目集I185:
{ add_expression -> item - add_expression . }, ), 
{ add_expression -> item - add_expression . }, >, 
{ add_expression -> item - add_expression . }, <, 
{ add_expression -> item - add_expression . }, ==, 
{ add_expression -> item - add_expression . }, >=, 
{ add_expression -> item - add_expression . }, <=, 
{ add_expression -> item - add_expression . }, !=, 
{ add_expression -> item - add_expression . }, ,, 

项目集I186:
{ factor -> ( expression ) . }, ;, 
{ factor -> ( expression ) . }, *, 
{ factor -> ( expression ) . }, /, 
{ factor -> ( expression ) . }, +, 
{ factor -> ( expression ) . }, -, 

项目集I187:
{ factor -> Identifier ( argument_list . ) }, ;, 
{ factor -> Identifier ( argument_list . ) }, *, 
{ factor -> Identifier ( argument_list . ) }, /, 
{ factor -> Identifier ( argument_list . ) }, +, 
{ factor -> Identifier ( argument_list . ) }, -, 

项目集I188:
{ item -> factor * item . }, ;, 
{ item -> factor * item . }, +, 
{ item -> factor * item . }, -, 

项目集I189:
{ item -> factor / item . }, ;, 
{ item -> factor / item . }, +, 
{ item -> factor / item . }, -, 

项目集I190:
{ add_expression -> item + add_expression . }, ;, 

项目集I191:
{ add_expression -> item - add_expression . }, ;, 

项目集I192:
{ while_sentence -> while M ( expression ) A . sentence_block }, if, while, return, Identifier, 
{ sentence_block -> . { inner_declare sentence_list } }, if, while, return, Identifier, 
{ while_sentence -> while M ( expression ) A . sentence_block }, }, 
{ sentence_block -> . { inner_declare sentence_list } }, }, 

项目集I193:
{ factor -> ( expression ) . }, ), 
{ factor -> ( expression ) . }, *, 
{ factor -> ( expression ) . }, /, 
{ factor -> ( expression ) . }, +, 
{ factor -> ( expression ) . }, -, 

项目集I194:
{ factor -> Identifier ( argument_list . ) }, ), 
{ factor -> Identifier ( argument_list . ) }, *, 
{ factor -> Identifier ( argument_list . ) }, /, 
{ factor -> Identifier ( argument_list . ) }, +, 
{ factor -> Identifier ( argument_list . ) }, -, 

项目集I195:
{ item -> factor * item . }, ), 
{ item -> factor * item . }, +, 
{ item -> factor * item . }, -, 

项目集I196:
{ item -> factor / item . }, ), 
{ item -> factor / item . }, +, 
{ item -> factor / item . }, -, 

项目集I197:
{ add_expression -> item + add_expression . }, ), 

项目集I198:
{ add_expression -> item - add_expression . }, ), 

项目集I199:
{ sentence_block -> { inner_declare . sentence_list } }, if, while, return, Identifier, 
{ sentence_list -> . sentence M sentence_list }, }, 
{ sentence_list -> . sentence }, }, 
{ sentence -> . if_sentence }, if, while, return, Identifier, 
{ sentence -> . while_sentence }, if, while, return, Identifier, 
{ sentence -> . return_sentence }, if, while, return, Identifier, 
{ sentence -> . assign_sentence }, if, while, return, Identifier, 
{ sentence -> . if_sentence }, }, 
{ sentence -> . while_sentence }, }, 
{ sentence -> . return_sentence }, }, 
{ sentence -> . assign_sentence }, }, 
{ if_sentence -> . if ( expression ) A sentence_block }, if, while, return, Identifier, 
{ if_sentence -> . if ( expression ) A sentence_block N else M A sentence_block }, if, while, return, Identifier, 
{ while_sentence -> . while M ( expression ) A sentence_block }, if, while, return, Identifier, 
{ return_sentence -> . return ; }, if, while, return, Identifier, 
{ return_sentence -> . return expression ; }, if, while, return, Identifier, 
{ assign_sentence -> . Identifier = expression ; }, if, while, return, Identifier, 
{ if_sentence -> . if ( expression ) A sentence_block }, }, 
{ if_sentence -> . if ( expression ) A sentence_block N else M A sentence_block }, }, 
{ while_sentence -> . while M ( expression ) A sentence_block }, }, 
{ return_sentence -> . return ; }, }, 
{ return_sentence -> . return expression ; }, }, 
{ assign_sentence -> . Identifier = expression ; }, }, 
{ sentence_block -> { inner_declare . sentence_list } }, else, 
{ sentence_block -> { inner_declare . sentence_list } }, }, 

项目集I200:
{ if_sentence -> if ( expression ) A sentence_block N . else M A sentence_block }, if, while, return, Identifier, 
{ if_sentence -> if ( expression ) A sentence_block N . else M A sentence_block }, }, 

项目集I201:
{ factor -> Identifier ( argument_list ) . }, ), 
{ factor -> Identifier ( argument_list ) . }, *, 
{ factor -> Identifier ( argument_list ) . }, /, 
{ factor -> Identifier ( argument_list ) . }, +, 
{ factor -> Identifier ( argument_list ) . }, -, 
{ factor -> Identifier ( argument_list ) . }, >, 
{ factor -> Identifier ( argument_list ) . }, <, 
{ factor -> Identifier ( argument_list ) . }, ==, 
{ factor -> Identifier ( argument_list ) . }, >=, 
{ factor -> Identifier ( argument_list ) . }, <=, 
{ factor -> Identifier ( argument_list ) . }, !=, 
{ factor -> Identifier ( argument_list ) . }, ,, 

项目集I202:
{ factor -> ( expression . ) }, ), 
{ factor -> ( expression . ) }, *, 
{ factor -> ( expression . ) }, /, 
{ factor -> ( expression . ) }, +, 
{ factor -> ( expression . ) }, -, 
{ factor -> ( expression . ) }, ,, 

项目集I203:
{ factor -> Identifier ( . argument_list ) }, ), 
{ argument_list -> . }, ), 
{ argument_list -> . expression }, ), 
{ argument_list -> . expression , argument_list }, ), 
{ expression -> . add_expression }, ), 
{ expression -> . add_expression > add_expression }, ), 
{ expression -> . add_expression < add_expression }, ), 
{ expression -> . add_expression == add_expression }, ), 
{ expression -> . add_expression >= add_expression }, ), 
{ expression -> . add_expression <= add_expression }, ), 
{ expression -> . add_expression != add_expression }, ), 
{ expression -> . add_expression }, ,, 
{ expression -> . add_expression > add_expression }, ,, 
{ expression -> . add_expression < add_expression }, ,, 
{ expression -> . add_expression == add_expression }, ,, 
{ expression -> . add_expression >= add_expression }, ,, 
{ expression -> . add_expression <= add_expression }, ,, 
{ expression -> . add_expression != add_expression }, ,, 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ add_expression -> . item }, >, 
{ add_expression -> . item + add_expression }, >, 
{ add_expression -> . item - add_expression }, >, 
{ add_expression -> . item }, <, 
{ add_expression -> . item + add_expression }, <, 
{ add_expression -> . item - add_expression }, <, 
{ add_expression -> . item }, ==, 
{ add_expression -> . item + add_expression }, ==, 
{ add_expression -> . item - add_expression }, ==, 
{ add_expression -> . item }, >=, 
{ add_expression -> . item + add_expression }, >=, 
{ add_expression -> . item - add_expression }, >=, 
{ add_expression -> . item }, <=, 
{ add_expression -> . item + add_expression }, <=, 
{ add_expression -> . item - add_expression }, <=, 
{ add_expression -> . item }, !=, 
{ add_expression -> . item + add_expression }, !=, 
{ add_expression -> . item - add_expression }, !=, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ item -> . factor }, >, 
{ item -> . factor * item }, >, 
{ item -> . factor / item }, >, 
{ item -> . factor }, <, 
{ item -> . factor * item }, <, 
{ item -> . factor / item }, <, 
{ item -> . factor }, ==, 
{ item -> . factor * item }, ==, 
{ item -> . factor / item }, ==, 
{ item -> . factor }, >=, 
{ item -> . factor * item }, >=, 
{ item -> . factor / item }, >=, 
{ item -> . factor }, <=, 
{ item -> . factor * item }, <=, 
{ item -> . factor / item }, <=, 
{ item -> . factor }, !=, 
{ item -> . factor * item }, !=, 
{ item -> . factor / item }, !=, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ factor -> . Integer }, >, 
{ factor -> . ( expression ) }, >, 
{ factor -> . Identifier ( argument_list ) }, >, 
{ factor -> . Identifier }, >, 
{ factor -> . Integer }, <, 
{ factor -> . ( expression ) }, <, 
{ factor -> . Identifier ( argument_list ) }, <, 
{ factor -> . Identifier }, <, 
{ factor -> . Integer }, ==, 
{ factor -> . ( expression ) }, ==, 
{ factor -> . Identifier ( argument_list ) }, ==, 
{ factor -> . Identifier }, ==, 
{ factor -> . Integer }, >=, 
{ factor -> . ( expression ) }, >=, 
{ factor -> . Identifier ( argument_list ) }, >=, 
{ factor -> . Identifier }, >=, 
{ factor -> . Integer }, <=, 
{ factor -> . ( expression ) }, <=, 
{ factor -> . Identifier ( argument_list ) }, <=, 
{ factor -> . Identifier }, <=, 
{ factor -> . Integer }, !=, 
{ factor -> . ( expression ) }, !=, 
{ factor -> . Identifier ( argument_list ) }, !=, 
{ factor -> . Identifier }, !=, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 
{ factor -> Identifier ( . argument_list ) }, *, 
{ factor -> Identifier ( . argument_list ) }, /, 
{ factor -> Identifier ( . argument_list ) }, +, 
{ factor -> Identifier ( . argument_list ) }, -, 
{ factor -> Identifier ( . argument_list ) }, ,, 

项目集I204:
{ item -> factor * . item }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ item -> factor * . item }, +, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ item -> factor * . item }, -, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ item -> factor * . item }, ,, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 

项目集I205:
{ item -> factor / . item }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ item -> factor / . item }, +, 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ item -> factor / . item }, -, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ item -> factor / . item }, ,, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 

项目集I206:
{ add_expression -> item + . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ add_expression -> item + . add_expression }, ,, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 

项目集I207:
{ add_expression -> item - . add_expression }, ), 
{ add_expression -> . item }, ), 
{ add_expression -> . item + add_expression }, ), 
{ add_expression -> . item - add_expression }, ), 
{ item -> . factor }, ), 
{ item -> . factor * item }, ), 
{ item -> . factor / item }, ), 
{ item -> . factor }, +, 
{ item -> . factor * item }, +, 
{ item -> . factor / item }, +, 
{ item -> . factor }, -, 
{ item -> . factor * item }, -, 
{ item -> . factor / item }, -, 
{ factor -> . Integer }, ), 
{ factor -> . ( expression ) }, ), 
{ factor -> . Identifier ( argument_list ) }, ), 
{ factor -> . Identifier }, ), 
{ factor -> . Integer }, *, 
{ factor -> . ( expression ) }, *, 
{ factor -> . Identifier ( argument_list ) }, *, 
{ factor -> . Identifier }, *, 
{ factor -> . Integer }, /, 
{ factor -> . ( expression ) }, /, 
{ factor -> . Identifier ( argument_list ) }, /, 
{ factor -> . Identifier }, /, 
{ factor -> . Integer }, +, 
{ factor -> . ( expression ) }, +, 
{ factor -> . Identifier ( argument_list ) }, +, 
{ factor -> . Identifier }, +, 
{ factor -> . Integer }, -, 
{ factor -> . ( expression ) }, -, 
{ factor -> . Identifier ( argument_list ) }, -, 
{ factor -> . Identifier }, -, 
{ add_expression -> item - . add_expression }, ,, 
{ add_expression -> . item }, ,, 
{ add_expression -> . item + add_expression }, ,, 
{ add_expression -> . item - add_expression }, ,, 
{ item -> . factor }, ,, 
{ item -> . factor * item }, ,, 
{ item -> . factor / item }, ,, 
{ factor -> . Integer }, ,, 
{ factor -> . ( expression ) }, ,, 
{ factor -> . Identifier ( argument_list ) }, ,, 
{ factor -> . Identifier }, ,, 

项目集I208:
{ factor -> Identifier ( argument_list ) . }, ;, 
{ factor -> Identifier ( argument_list ) . }, *, 
{ factor -> Identifier ( argument_list ) . }, /, 
{ factor -> Identifier ( argument_list ) . }, +, 
{ factor -> Identifier ( argument_list ) . }, -, 

项目集I209:
{ sentence_block -> { . inner_declare sentence_list } }, if, while, return, Identifier, 
{ inner_declare -> . }, if, while, return, Identifier, 
{ inner_declare -> . inner_var_declare ; inner_declare }, if, while, return, Identifier, 
{ inner_var_declare -> . int Identifier }, ;, 
{ sentence_block -> { . inner_declare sentence_list } }, }, 

项目集I210:
{ while_sentence -> while M ( expression ) A sentence_block . }, if, while, return, Identifier, 
{ while_sentence -> while M ( expression ) A sentence_block . }, }, 

项目集I211:
{ factor -> Identifier ( argument_list ) . }, ), 
{ factor -> Identifier ( argument_list ) . }, *, 
{ factor -> Identifier ( argument_list ) . }, /, 
{ factor -> Identifier ( argument_list ) . }, +, 
{ factor -> Identifier ( argument_list ) . }, -, 

项目集I212:
{ sentence_block -> { inner_declare sentence_list . } }, if, while, return, Identifier, 
{ sentence_block -> { inner_declare sentence_list . } }, else, 
{ sentence_block -> { inner_declare sentence_list . } }, }, 

项目集I213:
{ if_sentence -> if ( expression ) A sentence_block N else . M A sentence_block }, if, while, return, Identifier, 
{ M -> . }, {, 
{ if_sentence -> if ( expression ) A sentence_block N else . M A sentence_block }, }, 

项目集I214:
{ factor -> ( expression ) . }, ), 
{ factor -> ( expression ) . }, *, 
{ factor -> ( expression ) . }, /, 
{ factor -> ( expression ) . }, +, 
{ factor -> ( expression ) . }, -, 
{ factor -> ( expression ) . }, ,, 

项目集I215:
{ factor -> Identifier ( argument_list . ) }, ), 
{ factor -> Identifier ( argument_list . ) }, *, 
{ factor -> Identifier ( argument_list . ) }, /, 
{ factor -> Identifier ( argument_list . ) }, +, 
{ factor -> Identifier ( argument_list . ) }, -, 
{ factor -> Identifier ( argument_list . ) }, ,, 

项目集I216:
{ item -> factor * item . }, ), 
{ item -> factor * item . }, +, 
{ item -> factor * item . }, -, 
{ item -> factor * item . }, ,, 

项目集I217:
{ item -> factor / item . }, ), 
{ item -> factor / item . }, +, 
{ item -> factor / item . }, -, 
{ item -> factor / item . }, ,, 

项目集I218:
{ add_expression -> item + add_expression . }, ), 
{ add_expression -> item + add_expression . }, ,, 

项目集I219:
{ add_expression -> item - add_expression . }, ), 
{ add_expression -> item - add_expression . }, ,, 

项目集I220:
{ sentence_block -> { inner_declare . sentence_list } }, if, while, return, Identifier, 
{ sentence_list -> . sentence M sentence_list }, }, 
{ sentence_list -> . sentence }, }, 
{ sentence -> . if_sentence }, if, while, return, Identifier, 
{ sentence -> . while_sentence }, if, while, return, Identifier, 
{ sentence -> . return_sentence }, if, while, return, Identifier, 
{ sentence -> . assign_sentence }, if, while, return, Identifier, 
{ sentence -> . if_sentence }, }, 
{ sentence -> . while_sentence }, }, 
{ sentence -> . return_sentence }, }, 
{ sentence -> . assign_sentence }, }, 
{ if_sentence -> . if ( expression ) A sentence_block }, if, while, return, Identifier, 
{ if_sentence -> . if ( expression ) A sentence_block N else M A sentence_block }, if, while, return, Identifier, 
{ while_sentence -> . while M ( expression ) A sentence_block }, if, while, return, Identifier, 
{ return_sentence -> . return ; }, if, while, return, Identifier, 
{ return_sentence -> . return expression ; }, if, while, return, Identifier, 
{ assign_sentence -> . Identifier = expression ; }, if, while, return, Identifier, 
{ if_sentence -> . if ( expression ) A sentence_block }, }, 
{ if_sentence -> . if ( expression ) A sentence_block N else M A sentence_block }, }, 
{ while_sentence -> . while M ( expression ) A sentence_block }, }, 
{ return_sentence -> . return ; }, }, 
{ return_sentence -> . return expression ; }, }, 
{ assign_sentence -> . Identifier = expression ; }, }, 
{ sentence_block -> { inner_declare . sentence_list } }, }, 

项目集I221:
{ sentence_block -> { inner_declare sentence_list } . }, if, while, return, Identifier, 
{ sentence_block -> { inner_declare sentence_list } . }, else, 
{ sentence_block -> { inner_declare sentence_list } . }, }, 

项目集I222:
{ if_sentence -> if ( expression ) A sentence_block N else M . A sentence_block }, if, while, return, Identifier, 
{ A -> . }, {, 
{ if_sentence -> if ( expression ) A sentence_block N else M . A sentence_block }, }, 

项目集I223:
{ factor -> Identifier ( argument_list ) . }, ), 
{ factor -> Identifier ( argument_list ) . }, *, 
{ factor -> Identifier ( argument_list ) . }, /, 
{ factor -> Identifier ( argument_list ) . }, +, 
{ factor -> Identifier ( argument_list ) . }, -, 
{ factor -> Identifier ( argument_list ) . }, ,, 

项目集I224:
{ sentence_block -> { inner_declare sentence_list . } }, if, while, return, Identifier, 
{ sentence_block -> { inner_declare sentence_list . } }, }, 

项目集I225:
{ if_sentence -> if ( expression ) A sentence_block N else M A . sentence_block }, if, while, return, Identifier, 
{ sentence_block -> . { inner_declare sentence_list } }, if, while, return, Identifier, 
{ if_sentence -> if ( expression ) A sentence_block N else M A . sentence_block }, }, 
{ sentence_block -> . { inner_declare sentence_list } }, }, 

项目集I226:
{ sentence_block -> { inner_declare sentence_list } . }, if, while, return, Identifier, 
{ sentence_block -> { inner_declare sentence_list } . }, }, 

项目集I227:
{ if_sentence -> if ( expression ) A sentence_block N else M A sentence_block . }, if, while, return, Identifier, 
{ if_sentence -> if ( expression ) A sentence_block N else M A sentence_block . }, }, 

